#!/usr/bin/env python3
"""
Demonstra√ß√£o da liga√ß√£o entre Dispositivo e Usu√°rio
"""

import requests
import json

BASE_URL = "http://localhost:8000"
ADMIN_EMAIL = "admin@prm.gov.mz"
ADMIN_PASSWORD = "admin123"

def login():
    """Fazer login como admin"""
    response = requests.post(f"{BASE_URL}/auth/login", json={
        "email": ADMIN_EMAIL,
        "senha": ADMIN_PASSWORD
    })
    return response.json()["access_token"] if response.status_code == 200 else None

def create_usuario(token):
    """1. Admin cadastra usu√°rio"""
    print("1Ô∏è‚É£ ADMIN: Cadastrando usu√°rio...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Usando endpoint JSON (sem foto)
    usuario_data = {
        "nome_completo": "Maria Santos",
        "numero_identidade": "987654321B",
        "telefone_principal": "+258847654321",
        "telefone_emergencia": "+258841234567",
        "email": "maria.santos@email.com",
        "provincia": "Maputo",
        "cidade": "Maputo",
        "bairro": "Polana",
        "rua": "Rua da Paz",
        "numero_casa": "123",
        "ponto_referencia": "Pr√≥ximo ao mercado",
        "latitude_residencia": -25.9658,
        "longitude_residencia": 32.5892,
        "observacoes": "Casa com port√£o azul"
    }
    
    response = requests.post(f"{BASE_URL}/usuarios/", json=usuario_data, headers=headers)
    
    if response.status_code == 200:
        usuario = response.json()
        print(f"   ‚úÖ Usu√°rio criado: {usuario['nome_completo']} (ID: {usuario['id']})")
        return usuario
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def create_dispositivo(token, usuario_id):
    """2. Admin vincula dispositivo ao usu√°rio"""
    print(f"2Ô∏è‚É£ ADMIN: Vinculando dispositivo ao usu√°rio {usuario_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    dispositivo_data = {
        "imei": "123456789012345",
        "modelo": "iPhone 13",
        "marca": "Apple",
        "sistema_operacional": "iOS",
        "versao_app": "1.0.0",
        "usuario_id": usuario_id  # ‚Üê LIGA√á√ÉO AQUI!
    }
    
    response = requests.post(f"{BASE_URL}/dispositivos/", json=dispositivo_data, headers=headers)
    
    if response.status_code == 200:
        dispositivo = response.json()
        print(f"   ‚úÖ Dispositivo vinculado: IMEI {dispositivo['imei']} ‚Üí Usu√°rio {dispositivo['usuario_id']}")
        return dispositivo
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def simulate_app_registration():
    """3. App m√≥vel se registra automaticamente"""
    print("3Ô∏è‚É£ APP M√ìVEL: Registrando-se automaticamente...")
    
    # App envia apenas IMEI e dados do dispositivo
    app_data = {
        "imei": "123456789012345",  # Mesmo IMEI cadastrado pelo admin
        "modelo": "iPhone 13 Pro",  # App pode enviar modelo mais espec√≠fico
        "marca": "Apple",
        "sistema_operacional": "iOS 17",
        "versao_app": "1.0.1"
    }
    
    response = requests.post(f"{BASE_URL}/dispositivos/register", json=app_data)
    
    if response.status_code == 200:
        result = response.json()
        print(f"   ‚úÖ App ativado! Usu√°rio: {result['usuario_id']}, Dispositivo: {result['dispositivo_id']}")
        return result
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def test_emergency_with_link(dispositivo_id):
    """4. Testar emerg√™ncia com liga√ß√£o"""
    print(f"4Ô∏è‚É£ EMERG√äNCIA: Testando SOS do dispositivo {dispositivo_id}...")
    
    emergency_data = {
        "dispositivo_id": dispositivo_id,
        "latitude": -25.9658,
        "longitude": 32.5892,
        "nivel_bateria": 45,
        "precisao_gps": 3.2
    }
    
    response = requests.post(f"{BASE_URL}/emergencias/sos", json=emergency_data)
    
    if response.status_code == 200:
        result = response.json()
        print(f"   üö® EMERG√äNCIA CRIADA! ID: {result['emergency_id']}")
        return result
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def show_relationships(token):
    """5. Mostrar relacionamentos"""
    print("5Ô∏è‚É£ RELACIONAMENTOS: Verificando liga√ß√µes...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Listar usu√°rios
    users_response = requests.get(f"{BASE_URL}/usuarios/", headers=headers)
    if users_response.status_code == 200:
        usuarios = users_response.json()
        print(f"   üë• Total de usu√°rios: {len(usuarios)}")
        for user in usuarios:
            print(f"      - {user['nome_completo']} (ID: {user['id']})")
    
    # Listar dispositivos
    devices_response = requests.get(f"{BASE_URL}/dispositivos/", headers=headers)
    if devices_response.status_code == 200:
        dispositivos = devices_response.json()
        print(f"   üì± Total de dispositivos: {len(dispositivos)}")
        for device in dispositivos:
            print(f"      - IMEI: {device['imei']} ‚Üí Usu√°rio ID: {device['usuario_id']}")
    
    # Listar emerg√™ncias
    emergency_response = requests.get(f"{BASE_URL}/emergencias/", headers=headers)
    if emergency_response.status_code == 200:
        emergencias = emergency_response.json()
        print(f"   üö® Total de emerg√™ncias: {len(emergencias)}")
        for emergency in emergencias:
            print(f"      - ID: {emergency['id']} ‚Üí Usu√°rio: {emergency['usuario_id']}, Dispositivo: {emergency['dispositivo_id']}")

def main():
    """Demonstra√ß√£o completa"""
    print("üîó Demonstra√ß√£o: Liga√ß√£o Dispositivo ‚Üî Usu√°rio")
    print("=" * 60)
    
    # Login
    token = login()
    if not token:
        print("‚ùå Falha no login")
        return
    
    print("‚úÖ Login realizado com sucesso!\n")
    
    # 1. Criar usu√°rio
    usuario = create_usuario(token)
    if not usuario:
        return
    
    print()
    
    # 2. Vincular dispositivo
    dispositivo = create_dispositivo(token, usuario['id'])
    if not dispositivo:
        return
    
    print()
    
    # 3. App se registra
    app_result = simulate_app_registration()
    if not app_result:
        return
    
    print()
    
    # 4. Testar emerg√™ncia
    test_emergency_with_link(app_result['dispositivo_id'])
    
    print()
    
    # 5. Mostrar relacionamentos
    show_relationships(token)
    
    print("\n" + "=" * 60)
    print("‚úÖ Demonstra√ß√£o completa!")
    print("\nüìã RESUMO DO FLUXO:")
    print("   1. Admin cadastra usu√°rio na PRM")
    print("   2. Admin registra IMEI do celular do usu√°rio")
    print("   3. Usu√°rio recebe app que se ativa automaticamente")
    print("   4. Em emerg√™ncia, app envia SOS com localiza√ß√£o")
    print("   5. PRM recebe alerta com dados completos do usu√°rio")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå Demonstra√ß√£o interrompida")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
